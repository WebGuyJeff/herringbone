<?php
namespace Jefferson\Herringbone;

/**
 * Herringbone Custom Menu_Walker Class.
 * 
 * As it stands, this is just a copy/paste of the soil walker bundled with the
 * compare_base_url function from the soil project. All credit is due there: 
 * 
 * @link https://github.com/roots/soil/tree/0191aec223f3fd030be09014e0bfa599d59a22c2
 *
 * @package herringbone
 * @author Jefferson Real <me@jeffersonreal.com>
 * @copyright Copyright (c) 2021, Jefferson Real
 */

use Walker_Nav_Menu; 
use function get_post_type;
use function get_post_types;
use function get_post_type_archive_link;
use function is_search;
use function sanitize_title;
use function add_filter;
use function remove_filter;



/**
 * Herringbone Menu Walker
 *
 * This class is for editing html menu markup generated by WP Walker_Nav_Menu.
 * 
 * @package herringbone
 */
class Menu_Walker extends Walker_Nav_Menu {

    /**
     * Is current post a custom post type?
     *
     * @var bool
     */
    protected $is_cpt;

    /**
     * Archive page for current URL.
     *
     * @var string
     */
    protected $archive;

    public function __construct() {
        $cpt              = get_post_type();

        $this->is_cpt     = in_array( $cpt, get_post_types( array( '_builtin' => false ) ) );
        $this->archive    = get_post_type_archive_link( $cpt );
        $this->is_search  = is_search();
    }

    public function checkCurrent( $classes ) {
        return preg_match( '/(current[-_])|active/', $classes );
    }

    public function displayElement( $element, &$children_elements, $max_depth, $depth, $args, &$output ) {
        $element->is_subitem = ( ( !empty($children_elements[$element->ID] ) && ( ( $depth + 1 ) < $max_depth || ( $max_depth === 0 ) ) ) );

        if ( $element->is_subitem ) {
            foreach ( $children_elements[$element->ID] as $child ) {
                if ( $child->current_item_parent || $this->compare_base_url( $this->archive, $child->url ) ) {
                    $element->classes[] = 'active';
                }
            }
        }

        $element->is_active = ( !empty( $element->url ) && strpos( $this->archive, $element->url ) );

        if ($element->is_active && !$this->is_search) {
            $element->classes[] = 'active';
        }

        parent::display_element($element, $children_elements, $max_depth, $depth, $args, $output);

    }

    /**
     * Pass-throughs for WordPress.
     * phpcs:disable PSR1.Methods.CamelCapsMethodName.NotCamelCaps
     */
    public function display_element($element, &$children_elements, $max_depth, $depth, $args, &$output) {
        return $this->displayElement($element, $children_elements, $max_depth, $depth, $args, $output);
    }

    public function cssClasses( $classes, $item ) {
        $slug = sanitize_title( $item->title );

        // Fix core `active` behavior for custom post types
        if ( $this->is_cpt ) {
            $classes = str_replace('current_page_parent', '', $classes);

            if ( $this->archive && !$this->is_search ) {
                if ( $this->compare_base_url( $this->archive, $item->url ) ) {
                    $classes[] = 'active';
                }
            }
        }

        // Remove most core classes
        $classes = preg_replace( '/(current(-menu-|[-_]page[-_])(item|parent|ancestor))/', 'active', $classes );
        $classes = preg_replace( '/^((menu|page)[-_\w+]+)+/', '', $classes );

        // Add `menu_item` class. NOTE: with '_' not '-'.
        $classes[] = 'menu_item';

        // Add `menu_dropdown` class on parent elements
        if ($item->is_subitem) {
            $classes[] = 'menu_dropdown';
        }

        $classes = array_unique( $classes );
        $classes = array_map( 'trim', $classes );

        return array_filter( $classes );
    }

    public function walk($elements, $max_depth, ...$args) {
        // Add filters
        add_filter('nav_menu_css_class', array($this, 'cssClasses'), 10, 2);
        add_filter('nav_menu_item_id', '__return_null');

        // Perform usual walk
        $output = call_user_func_array(['parent', 'walk'], func_get_args());

        // Unregister filters
        remove_filter('nav_menu_css_class', [$this, 'cssClasses']);
        remove_filter('nav_menu_item_id', '__return_null');

        // Return result
        return $output;
    }

    /**
     * fallback method.
     * 
     * This method can be set as a callback in wp_nav_menu to display a fallback message
     * before the user sets a menu in that location.
     */
    public static function fallback() {

echo 'hello';
 /*
        if ( ! current_user_can( 'manage_options' ) ) {
            return;
        }

        extract( $args );

       $link = '<li class="button"><a href="' .admin_url( 'nav-menus.php', 'https' ) . '">Edit Menus</a></li>';

        $element    = isset( $container )       ? $container                    : '';
        $class      = isset( $container_class ) ? 'class=' . $container_class   : '';
        $id         = isset( $container_id )    ? 'id=' . $container_id         : '';

        $output = sprintf( $link );
        if ( ! empty ( $element ) ) {
            $output  = "<$element $class $id>$output</$element>";
        }

        if ( isset( $echo ) ) {
            if ( $echo ) {
                echo $output;
            } else {
                return $output;
            }
        } else {
            echo $output;
        }
*/    }


    /**
     * Compare Base url (from the soil project)
     * 
     * This function is used as a helper above.
     */
    public function compare_base_url($base_url, $input_url, $strict_scheme = true) {
        $base_url = trailingslashit($base_url);
        $input_url = trailingslashit($input_url);
    
        if ($base_url === $input_url) {
            return true;
        }
    
        $input_url = parse_url($input_url);
    
        if (!isset($input_url['host'])) {
            return true;
        }
    
        $base_url = parse_url($base_url);
    
        if (!isset($base_url['host'])) {
            return false;
        }
    
        if (!$strict_scheme || !isset($input_url['scheme']) || !isset($base_url['scheme'])) {
            $input_url['scheme'] = $base_url['scheme'] = 'soil';
        }
    
        if (($base_url['scheme'] !== $input_url['scheme'])) {
            return false;
        }
    
        if ($base_url['host'] !== $input_url['host']) {
            return false;
        }
    
        if ((isset($base_url['port']) || isset($input_url['port']))) {
            return isset($base_url['port'], $input_url['port']) && $base_url['port'] === $input_url['port'];
        }
    
        return true;
    }


}//class end