<?php
namespace Jefferson\Herringbone;
use \Walker_Nav_Menu; 

/**
 * Herringbone Menu Walker
 *
 * This class is for editing html menu markup generated by WP Walker_Nav_Menu.
 * 
 * @package herringbone
 */
class Menu_Walker extends Walker_Nav_Menu {


/*

	function start_el( &$output, $item, $depth = 0, $args = null, $id = 0 ) {

		if ( !empty( $item->classes ) && is_array( $item->classes ) ) {
			if ( array_search( 'menu-item-has-children', $item->classes ) ) {
            	$output .= sprintf(
					"\n<button class='button dropdown %s'><a href='%s' class=\"dropdown-toggle\" data-toggle=\"dropdown\" >%s</a>\n",
					( array_search( 'current-menu-item', $item->classes) || array_search( 'current-page-parent', $item->classes ) ) ? 'active' : '',
					$item->url,
					$item->title
            	);
			}
        } else {
            $output .= sprintf(
				"\n<button %s><a href='%s'>%s</a>\n",
				( 'current-menu-item' == $item->classes ) ? ' class="active"' : '',
				$item->url,
				$item->title
            );
        }
    }

*/






    /**
     * Starts the element output.
     */
    public function start_el( &$output, $item, $depth = 0, $args = null, $id = 0 ) {
        if ( isset( $args->item_spacing ) && 'discard' === $args->item_spacing ) {
            $t = '';
            $n = '';
        } else {
            $t = "\t";
            $n = "\n";
        }
        $indent = ( $depth ) ? str_repeat( $t, $depth ) : '';
 
        $classes   = empty( $item->classes ) ? array() : (array) $item->classes;
        $classes[] = 'menu-item-' . $item->ID;
 
        /**
         * Filters the arguments for a single nav menu item.
         */
        $args = apply_filters( 'nav_menu_item_args', $args, $item, $depth );
 
        /**
         * Filters the CSS classes applied to a menu item's list item element.
         */
        $class_names = implode( ' ', apply_filters( 'nav_menu_css_class', array_filter( $classes ), $item, $args, $depth ) );
        $class_names = $class_names ? ' class="' . esc_attr( $class_names ) . '"' : '';
 
        /**
         * Filters the ID applied to a menu item's list item element.
         */
        $id = apply_filters( 'nav_menu_item_id', 'menu-item-' . $item->ID, $item, $args, $depth );
        $id = $id ? ' id="' . esc_attr( $id ) . '"' : '';
 
        $output .= $indent . '<button' . $id . $class_names . '>';
 
        $atts           = array();
        $atts['title']  = ! empty( $item->attr_title ) ? $item->attr_title : '';
        $atts['target'] = ! empty( $item->target ) ? $item->target : '';
        if ( '_blank' === $item->target && empty( $item->xfn ) ) {
            $atts['rel'] = 'noopener';
        } else {
            $atts['rel'] = $item->xfn;
        }
        $atts['href']         = ! empty( $item->url ) ? $item->url : '';
        $atts['aria-current'] = $item->current ? 'page' : '';
 
        /**
         * Filters the HTML attributes applied to a menu item's anchor element.
         */
        $atts = apply_filters( 'nav_menu_link_attributes', $atts, $item, $args, $depth );
 
        $attributes = '';
        foreach ( $atts as $attr => $value ) {
            if ( is_scalar( $value ) && '' !== $value && false !== $value ) {
                $value       = ( 'href' === $attr ) ? esc_url( $value ) : esc_attr( $value );
                $attributes .= ' ' . $attr . '="' . $value . '"';
            }
        }
 
        $title = apply_filters( 'the_title', $item->title, $item->ID );
 
        /**
         * Filters a menu item's title.
         */
        $title = apply_filters( 'nav_menu_item_title', $title, $item, $args, $depth );
		
		if ( !empty( $args->before ) ) {
        	$item_output  = $args->before;
		} else {
			$item_output = '';
		}

        $item_output .= '<a' . $attributes . '>';

		if ( !empty( $args->link_before ) && !empty( $args->link_after ) ) {
        	$item_output .= $args->link_before . $title . $args->link_after;
		} else {
			$item_output .= $title;
		}

        $item_output .= '</a>';
		
		if ( !empty( $args->after ) ) {
        	$item_output  .= $args->after;
		}
 
        /**
         * Filters a menu item's starting output.
         */
        $output .= apply_filters( 'walker_nav_menu_start_el', $item_output, $item, $depth, $args );
    }
 
    /**
     * Ends the element output, if needed.
     */
    public function end_el( &$output, $item, $depth = 0, $args = null ) {
        if ( isset( $args->item_spacing ) && 'discard' === $args->item_spacing ) {
            $t = '';
            $n = '';
        } else {
            $t = "\t";
            $n = "\n";
        }
        $output .= "</button>{$n}";
    }





}//class end