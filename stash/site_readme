
~o~~~~~~~~~~oOo~~~~~~~~~~o~
~o Document  Information o~


  o Document  JeffersonReal.com Index
  o Version   0.1
  o Author	Jefferson Real
  o Contact   me@jeffersonreal.com



~o~~~~~~~oOo~~~~~~~o~
~o Directory Index o~


  ROOT					   ~Site pages, templates and .index.readme (this file)
  ├─animation
  ├─css					  ~Global styles (modules contain dedicated css files)
  ├─imagery
  │ ├─favicon
  │ ├─logo
  │ └─wheel
  ├─modules
  │ ├─contactForm
  │ ├─errorPage404
  │ ├─footer
  │ ├─head
  │ ├─header
  │ ├─herringbone



~o~~~~~~~~~oOo~~~~~~~~~o~
~o Directory Structure o~


A loose modular approach will likely be taken for the physical directory structure as at
this point in time I'm not using a templating engine or even a development environment to
make fully segmented files and directories manageable.

I may use a directory structure which groups blocks ('B'EM) into 'modules'. For example,
a contact form and all it's supporting code could be bundled into a directory indluding
its own dedicated css, html, php and js file thus making the contact form module a drag
and drop system, reusable in other projects. My initial thoughts are that this structure
doesn't lend itself to the rigid convention of BEM at all which is kind of all-or-nothing
if you want to reap the full benefits. It will mean either the need for a central
stylesheet for common blocks such as buttons which is a recipe for blurred lines and
broken systems, or duplicated code as styling is hosted in two or more stylesheets.

The duplicated code may be a worthwhile trade-off for the luxury of self-sustaining
'modules'. This approach would obviosuly be bad idea for large projects but it could be
a good place to start for this small website. If the naming can be adopted with some
vigilance, the groundwork will be in place for a migration to total BEM in the future.

In lieu of js or php templating, I'll be mainly pulling resources from these module
directories using php's 'file_get_contents' and 'include' functions and <link> tags to
pull in css.



~o~~~~~~~~oOo~~~~~~~~o~
~o Naming Convention o~


BEM naming will be adopted where possible to provide a modular and reusable structure
to the code. The naming style will be a camelCase adaption of classic BEM as to me, 
this is easier to read. I also prefer the idea of dedicating underscores to
block/element/modifier separation and reserving hyphens for css variables and any
unforeseen naming problems. camelCase also maps directly to javascript without the need
for additional translation.

				BLOCK, ELEMENT, MODIFIER, VALUE

classic style:  block-name__elem-name_mod-name_mod-val
camelCase:	  blockName_elemName_modName_modVal



~o~~~~~~~~~~~~oOo~~~~~~~~~~~~o~
~o HTML Elements & Structure o~


~o Document Elements o~

html
  head
  body
	header
	main
	footer
html


~o Layout o~

block
  block-sticky
  
  block_column
  block_row


~o Content o~

copy
  copy_header1
  copy_header2
  copy_header3
  copy_header4
  copy_header5
  copy_header6
  copy_punchline
  copy_quote
  copy_emphasis
  
image
  image_gallery

form
  form_section
  form_input
  
button
	  
	  
~o Mobile o~

ThumbNav


~o Desktop o~

Nav
	  
	  
	  
